package xml.encryp;

import java.io.*;
import java.security.Security;
import javax.crypto.*;
import javax.crypto.spec.*;
import org.apache.xerces.parsers.DOMParser;
import org.w3c.dom.*;
import org.xml.sax.SAXException;

public class encyp {
	private static Document document;
	private static SecretKey secretKeyDesKey = null;
    private static int iDecryptionInfoCounter = 0;

	public static void main(String argv[]) {

	    try {

		
				Security.addProvider(new com.sun.crypto.provider.SunJCE());
				secretKeyDesKey = KeyGenerator.getInstance("DES").generateKey();
			    encrypt();
	    }
	    catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void encrypt() {	    
	    
	    System.out.println("Encrypt...");
        
        String xmlFile = "/home/harmanjeet/Documents/emp.xml"; 

        DOMParser parser = new DOMParser();

        try {
            parser.parse(xmlFile);

        } catch (SAXException se) {
            se.printStackTrace();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }

        document = parser.getDocument();
        encryptChildNodes((Node) document);
        try {

    		String string = getElementAsString(document.getDocumentElement(), false);
			
			File fileOut = new File("XmlEncryptionTestEncryptedNodes" + ".xml");
			FileWriter fw = new FileWriter(fileOut);
			PrintWriter pw = new PrintWriter(fw, true);
			
			pw.print(string);
			
			pw.close();
		
		} catch (Exception ex) {
			
			System.out.println("Exception: " + ex);
		}
	}
	private static void encryptChildNodes(Node nNode) {
        
        NodeList nlChildNodes = nNode.getChildNodes();
        
        for (int i = 0; i < nlChildNodes.getLength(); i++) {
            
            Node nChildNode = nlChildNodes.item(i);
            
            if (nChildNode.getNodeType() == Node.ELEMENT_NODE) {
            	if (nChildNode.getNodeName().equals("ElementToBeEncrypted")) {
                    
                    encryptElement((Element) nChildNode, false);
                }
            	NamedNodeMap nnmAttributes = nChildNode.getAttributes();
            	if (nnmAttributes != null) {
                    
                                    
                        Node nAttribute = nnmAttributes.getNamedItem("AttributeValueToBeEncrypted1");
                    
                        if (nAttribute != null) {
               
                            encryptAttributeValue((Attr) nAttribute);
                        }
                }
            }
        }
	}
	// Encrypt an element.  The boolContentOnly flag controls whether the whole
    // element is encrypted or just the content.
    public static void encryptElement(Element element, boolean boolContentOnly) {
        
        // Get the element, or the element content, as a string.
        String string = getElementAsString(element, boolContentOnly);
        
        // The next part is standard JCA code for encrypting.
        byte[] bytesToBeEncrypted = string.getBytes();
        
        
        
        byte[] bytesCiphertext = null;
        
        try {
            Cipher cipherDes = Cipher.getInstance("DES/ECB/PKCS5Padding");
            
            

            cipherDes.init(Cipher.ENCRYPT_MODE, secretKeyDesKey);

            bytesCiphertext = cipherDes.doFinal(bytesToBeEncrypted);   
        } catch (Exception ex) {
            System.out.println("Exception: ");
            ex.printStackTrace();
        }        
        
        // Base64 the ciphertext.
        String base64EncodedElement = base64Encode(bytesCiphertext);
        
        Text txtBase64EncodedElement = document.createTextNode(base64EncodedElement);
        
        
        // Create a <DecryptionInfo> element...
        Element elDecryptionInfo = document.createElement("DecryptionInfo");        
   
        setupDecryptionInfo(elDecryptionInfo, secretKeyDesKey);

        // Create the <EncryptedData> element       
        Element elEncryptedData = document.createElement("EncryptedData");
        
        elEncryptedData.setAttribute("xmlns", "http://www.exampleorg/xmlenc");
        
        // Append the <DecryptionInfo> child.
        elEncryptedData.appendChild(elDecryptionInfo);

        // Append the <CipherText> child holding the encrypted data.
        Element elCipherText = document.createElement("CipherText");
        
        elCipherText.appendChild(txtBase64EncodedElement);
        
        elEncryptedData.appendChild(elCipherText);
        
      
        if (boolContentOnly) {
            
            while (element.hasChildNodes()) {
                element.removeChild(element.getChildNodes().item(0));
            }
        
            element.appendChild((Node) elEncryptedData);

        } else {
          
            Node nParentNode = element.getParentNode();
        
            nParentNode.replaceChild(elEncryptedData, element);
           
        }
               
        return;
    }
}

